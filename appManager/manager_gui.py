#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6
#    Dec 22, 2015 07:53:47 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import manager_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('RaschiettoManager')
    geom = "600x450+458+173"
    root.geometry(geom)
    w = RaschiettoManager (root)
    manager_gui_support.init(root, w)
    root.mainloop()

w = None
def create_RaschiettoManager(root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('RaschiettoManager')
    geom = "600x450+458+173"
    w.geometry(geom)
    w_win = RaschiettoManager (w)
    manager_gui_support.init(w, w_win, param)
    return w_win

def destroy_RaschiettoManager():
    global w
    w.destroy()
    w = None


class RaschiettoManager:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {DejaVu Sans} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font12 = "-family {DejaVu Sans} -size -12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font13 = "-family {DejaVu Sans} -size 11 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(highlightcolor="black")


        self.AppManager = Frame(master)
        self.AppManager.place(relx=0.0, rely=0.0, relheight=1.01, relwidth=1.01)
        self.AppManager.configure(relief=GROOVE)
        self.AppManager.configure(borderwidth="2")
        self.AppManager.configure(relief=GROOVE)
        self.AppManager.configure(width=605)

        self.GulpBtn = Button(self.AppManager)
        self.GulpBtn.place(relx=0.35, rely=0.11, height=40, width=170)
        self.GulpBtn.configure(activebackground="#d9d9d9")
        self.GulpBtn.configure(background="#004000")
        self.GulpBtn.configure(command=manager_gui_support.runGulp)
        self.GulpBtn.configure(foreground="white")
        self.GulpBtn.configure(text='''Esegui gulp!''')

        self.Scrolledtext1 = ScrolledText(self.AppManager)
        self.Scrolledtext1.place(relx=0.0, rely=0.44, relheight=0.54
                , relwidth=0.99)
        self.Scrolledtext1.configure(background="black")
        self.Scrolledtext1.configure(borderwidth="2")
        self.Scrolledtext1.configure(exportselection="0")
        self.Scrolledtext1.configure(font=font11)
        self.Scrolledtext1.configure(foreground="lightgrey")
        self.Scrolledtext1.configure(highlightbackground="white")
        self.Scrolledtext1.configure(insertbackground="white")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(width=70)
        self.Scrolledtext1.configure(wrap=NONE)

        self.Button1 = Button(self.AppManager)
        self.Button1.place(relx=0.68, rely=0.04, height=40, width=170)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(background="#af0000")
        self.Button1.configure(command=manager_gui_support.runNpm)
        self.Button1.configure(font=font10)
        self.Button1.configure(foreground="white")
        self.Button1.configure(text='''Reinstalla librerie JS''')

        self.Button2 = Button(self.AppManager)
        self.Button2.place(relx=0.68, rely=0.15, height=40, width=170)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(background="#af0000")
        self.Button2.configure(command=manager_gui_support.runPip)
        self.Button2.configure(font=font12)
        self.Button2.configure(foreground="white")
        self.Button2.configure(text='''Reinstalla librerie python''')

        self.Button3 = Button(self.AppManager)
        self.Button3.place(relx=0.68, rely=0.26, height=40, width=170)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(background="red")
        self.Button3.configure(command=manager_gui_support.doSetup)
        self.Button3.configure(font=font11)
        self.Button3.configure(foreground="white")
        self.Button3.configure(text='''Reinstalla tutto''')

        self.Button4 = Button(self.AppManager)
        self.Button4.place(relx=0.35, rely=0.22, height=77, width=167)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="white")
        self.Button4.configure(background="#006400")
        self.Button4.configure(command=manager_gui_support.runWatch)
        self.Button4.configure(font=font10)
        self.Button4.configure(foreground="#F1F1F1")
        self.Button4.configure(text='''Esegui gulp watch!!!''')

        self.Button5 = Button(self.AppManager)
        self.Button5.place(relx=0.03, rely=0.04, height=40, width=170)
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(background="darkblue")
        self.Button5.configure(command=manager_gui_support.genApacheConf)
        self.Button5.configure(font=font13)
        self.Button5.configure(foreground="#ffffff")
        self.Button5.configure(text='''Genera conf apache''')

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)







# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



